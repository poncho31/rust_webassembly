plugins {
    id 'com.android.application'
}

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.rustwebassembly.app"
        minSdk 24
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        
        // Configuration pour les binaires natifs Rust
        ndk {
            abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86_64'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
        }
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    
    buildFeatures {
        viewBinding true
    }
    
    packagingOptions {
        // Évite les conflits avec les bibliothèques natives
        pickFirst '**/libc++_shared.so'
        pickFirst '**/libjsc.so'
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.lifecycle:lifecycle-viewmodel:2.4.1'
    implementation 'androidx.lifecycle:lifecycle-livedata:2.4.1'
    
    // Pour les requêtes HTTP vers le serveur Rust local
    implementation 'com.squareup.okhttp3:okhttp:4.9.3'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    
    // Pour le JSON
    implementation 'com.google.code.gson:gson:2.8.9'
    
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

// Tâche pour copier les binaires Rust
task copyRustBinaries {
    doLast {
        def rustTargetDir = "${project.rootDir}/../target"
        def jniLibsDir = "${project.projectDir}/src/main/jniLibs"
        
        // Copie des binaires pour différentes architectures
        copy {
            from "${rustTargetDir}/aarch64-linux-android/release/deps/libserver.so"
            into "${jniLibsDir}/arm64-v8a/"
            rename 'libserver.so', 'librust_server.so'
        }
        
        copy {
            from "${rustTargetDir}/armv7-linux-androideabi/release/deps/libserver.so"
            into "${jniLibsDir}/armeabi-v7a/"
            rename 'libserver.so', 'librust_server.so'
        }
        
        copy {
            from "${rustTargetDir}/x86_64-linux-android/release/deps/libserver.so"
            into "${jniLibsDir}/x86_64/"
            rename 'libserver.so', 'librust_server.so'
        }
    }
}

// Exécute la copie avant l'assemblage
preBuild.dependsOn copyRustBinaries
